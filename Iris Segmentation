
import cv2
import os
import glob
import numpy as np

def perform_iris_segmentation(image):
    # Convert image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)
    
    # Perform Canny edge detection
    edges = cv2.Canny(blurred, 50, 150)
    
    # Apply morphological closing to close gaps in edges
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (15, 15))
    closed = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)
    
    # Find contours in the closed image
    contours, _ = cv2.findContours(closed.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Find the largest contour
    largest_contour = max(contours, key=cv2.contourArea)
    
    # Create a mask for the largest contour
    mask = np.zeros_like(gray)
    cv2.drawContours(mask, [largest_contour], 0, (255), -1)
    
    # Apply the mask to the original image
    segmented = cv2.bitwise_and(image, image, mask=mask)
    
    return segmented, largest_contour
def process_image(filepath):
    image = cv2.imread(filepath)
    image = cv2.resize(image, (200, 150))
    # Perform iris segmentation
    segmented_image, largest_contour = perform_iris_segmentation(image)
    
    # Draw a bounding rectangle around the iris
    x, y, w, h = cv2.boundingRect(largest_contour)
    cv2.rectangle(segmented_image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    
    # Save the segmented image
    output_path = 'output/' + os.path.basename(filepath)
    cv2.imwrite(output_path, segmented_image)

   # Process all images in the input directory
input_directory = 'dataset/'
output_directory = 'output/'
if not os.path.exists(output_directory):
    os.makedirs(output_directory)

for filepath in glob.iglob(input_directory + '**/*.jpg', recursive=True):
    process_image(filepath)
    print('Processed:', filepath)
    
   
