import cv2
import numpy as np
import glob
import pickle
from keras.applications.vgg16 import preprocess_input
from sklearn import preprocessing
from tensorflow.keras.utils import to_categorical
from keras.preprocessing import image
import keras
import joblib
from keras.models import Model
from keras.applications.densenet import DenseNet121
from keras.applications.vgg16 import VGG16
from keras.applications.densenet import DenseNet201
from keras.applications.inception_v3 import InceptionV3
from keras.applications.inception_resnet_v2 import InceptionResNetV2
from keras.applications.xception import Xception

imgs = []
final_output_84_84 = []
labels = []

for filefilepath in glob.iglob('final_casia/*'):
    if filefilepath.endswith('.jpg') or filefilepath.endswith('.jpeg') or filefilepath.endswith('.png'):
        img = cv2.imread(filefilepath)
        imgs_colored = cv2.imread(filefilepath)

        label = filefilepath.split(".")[0][12:]
        example_number = filefilepath.split(".")[1]

        imgs.append([imgs_colored, int(label)])

import random
random.shuffle(imgs)

for i, j in imgs:
    final_output_84_84.append(cv2.resize(i.astype(np.float32), (70, 70)))
    labels.append(j)

y = to_categorical(labels, num_classes=1000, dtype='float32')
final_output_84_84 = np.array(final_output_84_84, dtype="float16") / 255

vgg_model = VGG16(weights='imagenet', include_top=False, input_shape=(70, 70, 3))
vgg_output = vgg_model.layers[-1].output

densenet_model = DenseNet201(weights='imagenet', include_top=False, input_shape=(70, 70, 3))
densenet_output = densenet_model.layers[-1].output

merged = keras.layers.concatenate([vgg_output, densenet_output])
merged = keras.layers.GlobalAveragePooling2D()(merged)
merged = keras.layers.BatchNormalization()(merged)
merged = keras.layers.Dense(512, activation='relu')(merged)
merged = keras.layers.Dropout(0.5)(merged)
merged = keras.layers.Dense(1000, activation='softmax')(merged)


model = Model(inputs=[vgg_model.input, densenet_model.input], outputs=merged)
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(final_output_84_84, y, test_size=0.1, random_state=42)

history = model.fit([x_train, x_train], y_train, validation_data=([x_test, x_test], y_test), epochs=150, batch_size=32)

import matplotlib.pyplot as plt

# plot accuracy
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()
# predict labels for test set using keras model
y_pred_keras = model.predict(x_test)
y_pred_keras = (y_pred_keras > 0.5).astype(int) # convert probabilities to binary labels
y_pred_keras
from sklearn.preprocessing import LabelBinarizer
from sklearn.metrics import roc_curve, auc

# Binarize the labels
lb = LabelBinarizer()
y_test = lb.fit_transform(y_test)
y_pred_keras = model.predict(x_test)

# Compute ROC curve and ROC area for each class
fpr_keras, tpr_keras, thresholds_keras = roc_curve(y_test.ravel(), y_pred_keras.ravel())
auc_keras = auc(fpr_keras, tpr_keras)

# Plot the ROC curves
plt.figure(1)
plt.plot([0, 1], [0, 1], 'k--')
plt.plot(fpr_keras, tpr_keras, label='Keras (area = {:.3f})'.format(auc_keras))
plt.xlabel('False positive rate')
plt.ylabel('True positive rate')
plt.title('ROC curve')
plt.legend(loc='best')
plt.show()

